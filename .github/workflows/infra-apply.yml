# infra-apply.yml
name: infra-apply

on:
  workflow_dispatch:
    inputs:
      project_path:
        description: 'App subdir (e.g., apps/my-react-app)'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  apply:
    runs-on: ubuntu-latest
    env:
      PROJECT_PATH: ${{ inputs.project_path }}
    steps:
      - uses: actions/checkout@v4

      - name: Sanity check project path
        shell: bash
        run: |
          set -euo pipefail
          test -d "${PROJECT_PATH}/infra" || { echo "::error::No infra dir at ${PROJECT_PATH}/infra"; exit 1; }

      - name: Normalize slug
        id: slug
        shell: bash
        run: |
          set -euo pipefail
          slug="$(basename "$PROJECT_PATH")"
          echo "slug=$slug" >> "$GITHUB_OUTPUT"

      - name: AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-skip-session-tagging: true 

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.x

      - name: Write backend.hcl (derive org/repo/env)
        working-directory: ${{ env.PROJECT_PATH }}/infra
        shell: bash
        run: |
            set -euo pipefail
            ORG="${{ github.repository_owner }}"
            REPO="${{ github.event.repository.name }}"
            REF="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
            REF="${REF#refs/tags/}"
            ENV="$REF"
            [[ -z "$ENV" ]] && ENV="${{ github.ref_name }}"
            [[ "$ENV" == "main" ]] && ENV="prod"
            ENV="${ENV//\//-}"
            APP="${{ env.PROJECT_PATH }}"
            cat > backend.hcl <<EOF
            bucket         = "${{ secrets.TFSTATE_BUCKET }}"
            key            = "repos/${ORG}/${REPO}/${ENV}/${APP}/terraform.tfstate"
            region         = "${{ secrets.AWS_REGION }}"
            dynamodb_table = "${{ secrets.TF_LOCK_TABLE }}"
            encrypt        = true
            EOF
            echo "Using state key: repos/${ORG}/${REPO}/${ENV}/${APP}/terraform.tfstate"

      - name: Terraform Init (remote backend)
        working-directory: ${{ env.PROJECT_PATH }}/infra
        run: terraform init -input=false -backend-config=backend.hcl -lock-timeout=3m

      - name: Terraform Apply
        working-directory: ${{ env.PROJECT_PATH }}/infra
        run: terraform apply -auto-approve -input=false -lock-timeout=3m -var-file=env/terraform.tfvars


