name: destroy-site

on:
  repository_dispatch:
    types: [destroy_site]
  workflow_dispatch:
    inputs:
      project_path:
        description: 'App subdir (e.g., my-app)'
        required: true
        type: string
      delete_bucket:
        description: 'Also delete the S3 bucket after emptying it'
        required: false
        type: boolean
        default: false
      delete_distribution:
        description: 'Disable and delete the CloudFront distribution (slow)'
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

# Separate concurrency per app (or ref fallback)
concurrency:
  group: destroy-site-${{ github.workflow }}-${{ github.event.client_payload.project_path || github.ref || 'na' }}
  cancel-in-progress: false

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      project_path:       ${{ steps.detect.outputs.project_path }}
      aws_region:         ${{ steps.region.outputs.region }}
      delete_bucket:      ${{ steps.flags.outputs.delete_bucket }}
      delete_distribution:${{ steps.flags.outputs.delete_distribution }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - id: detect
        shell: bash
        run: |
          set -euo pipefail

          if [[ "${{ github.event_name }}" == "repository_dispatch" && "${{ github.event.action }}" == "destroy_site" ]]; then
            if [[ -z "${{ github.event.client_payload.project_path }}" ]]; then
              echo "::error::Missing client_payload.project_path"
              exit 1
            fi
            echo "project_path=${{ github.event.client_payload.project_path }}" >> "$GITHUB_OUTPUT"
            echo "Detected app (dispatch): ${{ github.event.client_payload.project_path }}"
            exit 0
          fi

          # Manual run
          if [[ -n "${{ inputs.project_path || '' }}" ]]; then
            echo "project_path=${{ inputs.project_path }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "::error::Unsupported trigger or missing project_path."
          exit 1

      - name: Read region (dispatch payload or tfvars)
        id: region
        shell: bash
        env:
          APP_DIR: ${{ steps.detect.outputs.project_path }}
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "repository_dispatch" && -n "${{ github.event.client_payload.aws_region }}" ]]; then
            echo "region=${{ github.event.client_payload.aws_region }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          FILE="$APP_DIR/infra/env/terraform.tfvars"
          REG=""
          if [[ -f "$FILE" ]]; then
            REG=$(awk -F= '/^\s*aws_region\s*=/{gsub(/[[:space:]"]/, "", $2); print $2}' "$FILE" | tail -n1)
          fi
          echo "region=${REG:-us-east-1}" >> "$GITHUB_OUTPUT"

      - name: Resolve flags
        id: flags
        shell: bash
        run: |
          set -euo pipefail
          DEL_BUCKET="false"
          DEL_DIST="false"
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            [[ "${{ github.event.client_payload.delete_bucket }}" == "true" ]] && DEL_BUCKET="true"
            [[ "${{ github.event.client_payload.delete_distribution }}" == "true" ]] && DEL_DIST="true"
          else
            [[ "${{ inputs.delete_bucket }}" == "true" ]] && DEL_BUCKET="true"
            [[ "${{ inputs.delete_distribution }}" == "true" ]] && DEL_DIST="true"
          fi
          echo "delete_bucket=$DEL_BUCKET" >> "$GITHUB_OUTPUT"
          echo "delete_distribution=$DEL_DIST" >> "$GITHUB_OUTPUT"

  destroy:
    needs: detect
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ${{ needs.detect.outputs.project_path }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}
          aws-region:     ${{ needs.detect.outputs.aws_region }}
          role-session-name: destroy-site-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Resolve bucket & distribution (payload → TF outputs)
        id: resolve
        working-directory: ${{ needs.detect.outputs.project_path }}/infra
        shell: bash
        run: |
          set -euo pipefail
          # Prefer explicit payload
          BUCKET="${{ github.event.client_payload.bucket_name }}"
          DIST="${{ github.event.client_payload.cloudfront_distribution }}"
          DOMAIN="${{ github.event.client_payload.cloudfront_domain }}"

          # Fall back to TF outputs if missing
          if [[ -z "$BUCKET" || -z "$DIST" || -z "$DOMAIN" ]]; then
            terraform init -backend=false -input=false >/dev/null 2>&1 || true
            [[ -z "$BUCKET" ]] && BUCKET="$(terraform output -raw bucket_name 2>/dev/null || true)"
            [[ -z "$DIST"   ]] && DIST="$(terraform output -raw cloudfront_distribution 2>/dev/null || true)"
            [[ -z "$DOMAIN" ]] && DOMAIN="$(terraform output -raw cloudfront_domain 2>/dev/null || true)"
          fi

          echo "bucket=$BUCKET"  >> "$GITHUB_OUTPUT"
          echo "dist=$DIST"      >> "$GITHUB_OUTPUT"
          echo "domain=$DOMAIN"  >> "$GITHUB_OUTPUT"

          {
            echo "### 🧹 Site destroy (preview)"
            [[ -n "$BUCKET" ]] && echo "- **Bucket:** \`$BUCKET\`"
            [[ -n "$DIST"   ]] && echo "- **CloudFront ID:** \`$DIST\`"
            [[ -n "$DOMAIN" ]] && echo "- **URL:** https://$DOMAIN"
            echo "- **Delete bucket?** ${{ needs.detect.outputs.delete_bucket }}"
            echo "- **Delete distribution?** ${{ needs.detect.outputs.delete_distribution }}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Empty S3 bucket (safe no-op if missing)
        if: ${{ steps.resolve.outputs.bucket != '' }}
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="${{ steps.resolve.outputs.bucket }}"
          echo "Emptying s3://$BUCKET ..."
          aws s3 rm "s3://$BUCKET" --recursive || true

      - name: Delete S3 bucket (optional)
        if: ${{ steps.resolve.outputs.bucket != '' && needs.detect.outputs.delete_bucket == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="${{ steps.resolve.outputs.bucket }}"
          REGION="${{ needs.detect.outputs.aws_region }}"
          echo "Deleting bucket $BUCKET ..."
          aws s3api delete-bucket --bucket "$BUCKET" --region "$REGION"

      - name: Invalidate CloudFront (optional)
        if: ${{ steps.resolve.outputs.dist != '' }}
        shell: bash
        run: |
          set -euo pipefail
          DIST="${{ steps.resolve.outputs.dist }}"
          echo "Creating invalidation on $DIST ..."
          aws cloudfront create-invalidation --distribution-id "$DIST" --paths "/*" >/dev/null

      - name: Disable & delete CloudFront distribution (optional & slow)
        if: ${{ steps.resolve.outputs.dist != '' && needs.detect.outputs.delete_distribution == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          DIST="${{ steps.resolve.outputs.dist }}"
          echo "Disabling distribution $DIST ..."
          # Get config & ETag
          aws cloudfront get-distribution-config --id "$DIST" > dist.json
          ETAG=$(jq -r '.ETag' dist.json)
          jq '.DistributionConfig.Enabled=false' dist.json > dist-disabled.json
          # Update (disable)
          aws cloudfront update-distribution \
            --id "$DIST" \
            --if-match "$ETAG" \
            --distribution-config "$(jq -r '.DistributionConfig' dist-disabled.json)" > upd.json
          # Wait for Deployed
          echo "Waiting for distribution to be Deployed & Disabled ..."
          for i in {1..60}; do
            STATUS=$(aws cloudfront get-distribution --id "$DIST" --query 'Distribution.Status' --output text)
            ENABLED=$(aws cloudfront get-distribution --id "$DIST" --query 'Distribution.DistributionConfig.Enabled' --output text)
            echo "  Attempt $i: status=$STATUS enabled=$ENABLED"
            [[ "$STATUS" == "Deployed" && "$ENABLED" == "False" ]] && break
            sleep 10
          done
          # Refresh ETag & delete
          NEW_ETAG=$(aws cloudfront get-distribution-config --id "$DIST" --query 'ETag' --output text)
          echo "Deleting distribution $DIST ..."
          aws cloudfront delete-distribution --id "$DIST" --if-match "$NEW_ETAG"

      - name: Summary
        shell: bash
        run: |
          {
            echo "## 🗑️ Site destroy complete"
            [[ -n "${{ steps.resolve.outputs.bucket }}" ]] && echo "- **Bucket:** \`${{ steps.resolve.outputs.bucket }}\`"
            [[ -n "${{ steps.resolve.outputs.dist }}"   ]] && echo "- **CloudFront ID:** \`${{ steps.resolve.outputs.dist }}\`"
            [[ -n "${{ steps.resolve.outputs.domain }}" ]] && echo "- **URL:** https://${{ steps.resolve.outputs.domain }}"
            echo "- **Delete bucket?** ${{ needs.detect.outputs.delete_bucket }}"
            echo "- **Delete distribution?** ${{ needs.detect.outputs.delete_distribution }}"
          } >> "$GITHUB_STEP_SUMMARY"
